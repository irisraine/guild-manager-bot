from collections import deque
from datetime import datetime, timedelta
import nextcord
from nextcord.ext import commands, tasks, application_checks
import requests
import re
import logging
from engine.content_moderator import is_image_nsfw
import engine.config as config

intents = nextcord.Intents.all()
client = commands.Bot(command_prefix='&', intents=intents, default_guild_ids=[config.GUILD_ID])

COMMENTS_THREAD_NAME = "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
GREETING_BOT_MESSAGE = "–°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
MUTE_HEADER_MESSAGE = '‚ùå –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞–º –±–∞–Ω! ‚ùå'
GIF_WARNING_HEADER_MESSAGE = 'üí¢ It\'s time to stop! üí¢'
ERROR_HEADER = "–û—à–∏–±–∫–∞"
ERROR_MESSAGE = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!"
MUTE_REASONS = {'SPAM': "—Å–ø–∞–º–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏",
                'NSFW': "–ø–æ—Å—Ç–∏–ª –Ω–µ–ø–æ—Ç—Ä–µ–±—Å—Ç–≤–∞"}
MUTE_DESCRIPTION_MESSAGE = "–¢–µ–ø–µ—Ä—å –æ–Ω —É–ª–µ—Ç–∞–µ—Ç –≤ –º—É—Ç, —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–¥—É–º–∞—Ç—å –æ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏!"
GIF_WARNING_DESCRIPTION_MESSAGE = ("–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∏—Ñ–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. "
                                   "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞—Å—ã–ø—å—Ç–µ –∫–æ—Å—Ç–µ–π –∏–ª–∏ —Å–µ–Ω–∞ –≤ –∫–æ—Ä–º—É—à–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")

unwanted_content = False
user_message_statistics = {}
muted_users = {}

is_gif_limits = False
users_gifs = {}


def get_attached_media(message):
    url_pattern = re.compile(r'(https?://\S+)')
    youtube_url_pattern = re.compile(r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/.+')
    gif_vaults_domains = ['media1.tenor.com', 'tenor.com/view', 'giphy.com']

    attached_images_urls = []
    attached_videos_urls = []
    for attachment in message.attachments:
        if attachment.content_type:
            if attachment.content_type.startswith('image/'):
                attached_images_urls.append(attachment.url)
            elif attachment.content_type.startswith('video/'):
                attached_videos_urls.append(attachment.url)
    message_contents = message.content.split("\n")
    message_urls = [url_match.group() for item in message_contents if (url_match := url_pattern.search(item))]
    attached_videos_urls.extend(
        [url for url in message_urls if youtube_url_pattern.search(url)]
    )
    for url in message_urls:
        try:
            response = requests.get(url, timeout=5) if gif_vaults_domains[0] in url else requests.head(url, timeout=5)
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                if 'image' in content_type or any(domain in url for domain in gif_vaults_domains[1:]):
                    attached_images_urls.append(url)
        except requests.exceptions.RequestException:
            continue
        except Exception as error:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {error}")
    return {
        'images': attached_images_urls,
        'videos': attached_videos_urls
    }


async def mute_user(message, reason):
    try:
        await message.author.timeout(
            timedelta(seconds=config.TIMEOUT_DURATION),
            reason=reason
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º—É—Ç.")
    except nextcord.errors.Forbidden:
        logging.info("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –º—É—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def delete_message(message):
    try:
        await message.delete()
    except nextcord.errors.NotFound:
        logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ª–∏–±–æ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.")
    except Exception as error:
        logging.error(f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}.")


async def safe_fetch_message(message_id):
    channel = client.get_channel(config.COMMON_DISCUSSION_CHANNEL)
    try:
        fetched_message = await channel.fetch_message(message_id)
        return fetched_message
    except nextcord.NotFound:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–∏–¥–∏–º–æ, –æ–Ω–æ –±—ã–ª–æ —Ä–∞–Ω–µ–µ —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
    except Exception as error:
        logging.error(f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}.")


async def create_thread(message):
    if config.ALLOWED_CHANNELS and message.channel.id not in config.ALLOWED_CHANNELS:
        return
    try:
        thread = await message.create_thread(
            name=COMMENTS_THREAD_NAME,
            auto_archive_duration=60
        )
        await thread.send(GREETING_BOT_MESSAGE)
        logging.info(f"–°–æ–∑–¥–∞–Ω —Ç—Ä–µ–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è id:{message.id}, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç")
    except nextcord.errors.HTTPException as error:
        logging.error(f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error}.")
    except Exception as error:
        logging.error(f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}.")


async def check_spam(message):
    user_id = message.author.id
    global unwanted_content
    global user_message_statistics
    global muted_users
    if user_id not in user_message_statistics:
        user_message_statistics[user_id] = deque(maxlen=config.MAX_IMAGES)
    user_message_statistics[user_id].append(message.created_at.timestamp())
    if user_id in user_message_statistics and len(user_message_statistics[user_id]) == config.MAX_IMAGES:
        oldest_message_time = user_message_statistics[user_id].popleft()
        current_time = message.created_at.timestamp()
        if current_time - oldest_message_time <= config.TIME_LIMIT:
            unwanted_content = True
            muted_users[user_id] = {'channel': message.channel,
                                    'reason': MUTE_REASONS['SPAM']}
            await mute_user(message, MUTE_REASONS['SPAM'])
            spam_initial_time = datetime.fromtimestamp(current_time - config.TIME_LIMIT)
            async for item in message.channel.history(limit=None, after=spam_initial_time):
                if item.author == message.author:
                    await delete_message(item)
            user_message_statistics.pop(user_id, None)


async def check_nsfw(message, message_images_urls):
    user_id = message.author.id
    global unwanted_content
    global muted_users
    for image_url in message_images_urls:
        if await is_image_nsfw(image_url):
            unwanted_content = True
            muted_users[user_id] = {'channel': message.channel,
                                    'reason': MUTE_REASONS['NSFW']}
            await mute_user(message, MUTE_REASONS['NSFW'])
            await delete_message(message)
            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É {image_url} —Å–æ–¥–µ—Ä–∂–∏—Ç NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")


async def check_gifs(message, message_images_urls):
    gif_extension_pattern = re.compile(r"tenor\.com|giphy\.com|\.gif($|\?|&)")
    if any(gif_extension_pattern.search(image_url) for image_url in message_images_urls):
        global users_gifs
        user_id = message.author.id
        current_time = datetime.now()
        cooldown = timedelta(seconds=config.GIF_COOLDOWN_DURATION)
        if user_id in users_gifs and current_time - users_gifs[user_id].get('time') < cooldown:
            if users_gifs[user_id].get('warning_id'):
                previous_warning_id = users_gifs[user_id].get('warning_id')
                previous_warning_message = await safe_fetch_message(previous_warning_id)
                if previous_warning_message:
                    await delete_message(previous_warning_message)
            warning_message = await message.channel.send(embed=nextcord.Embed(
                title=GIF_WARNING_HEADER_MESSAGE,
                description=f"–£–≤–∞–∂–∞–µ–º—ã–π {message.author.mention}! {GIF_WARNING_DESCRIPTION_MESSAGE}",
                colour=nextcord.Color.red())
            )
            users_gifs[user_id]['warning_id'] = warning_message.id
            await delete_message(message)
        else:
            users_gifs[user_id] = {'time': current_time, 'warning_id': None}


@client.event
async def on_message(message):
    if message.author.bot:
        return

    message_media_urls = get_attached_media(message)
    if message_media_urls['images']:
        if not message.author.guild_permissions.administrator:
            await check_spam(message)
            await check_nsfw(message, message_media_urls['images'])
            if unwanted_content:
                return
            if is_gif_limits and message.channel.id == config.COMMON_DISCUSSION_CHANNEL:
                await check_gifs(message, message_media_urls['images'])
    if message_media_urls['images'] or message_media_urls['videos']:
        await create_thread(message)

    await client.process_commands(message)


@client.event
async def on_member_update(before, after):
    global muted_users
    if not before.communication_disabled_until and after.communication_disabled_until:
        if after.id in muted_users.keys():
            channel = muted_users[after.id]['channel']
            reason_for_muting = muted_users[after.id]['reason']
            mute_info = nextcord.Embed(
                title=MUTE_HEADER_MESSAGE,
                description=f'–ê–±–æ–±–∞ {after.mention} {reason_for_muting}. {MUTE_DESCRIPTION_MESSAGE}',
                colour=nextcord.Color.red()
            )
            await channel.send(embed=mute_info)
            muted_users.pop(after.id, None)


@tasks.loop(minutes=10)
async def purge_gif_warnings():
    for user_id, gif_info in users_gifs.items():
        current_warning_id = gif_info.get('warning_id')
        if current_warning_id:
            current_warning_message = await safe_fetch_message(current_warning_id)
            if current_warning_message:
                await delete_message(current_warning_message)
                users_gifs[user_id]['warning_id'] = None


@client.slash_command(description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∏—Ñ–æ–∫")
@application_checks.has_role(config.ADMIN_ROLE)
async def gif_limits(
        interaction: nextcord.Interaction,
        toggle: str = nextcord.SlashOption(
            description="–°—Ç–∞—Ç—É—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            choices={"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": "on", "–æ—Ç–º–µ–Ω–∏—Ç—å": "off"}
        )):
    global is_gif_limits
    if toggle == "on":
        is_gif_limits = True
        if not purge_gif_warnings.is_running():
            purge_gif_warnings.start()
    elif toggle == "off":
        is_gif_limits = False
        purge_gif_warnings.stop()
        users_gifs.clear()
    status = "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if toggle == "on" else "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    await interaction.response.send_message(
        embed=nextcord.Embed(
            description=f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∏—Ñ–æ–∫ {status}.",
            colour=nextcord.Color.red())
    )
    logging.info(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∏—Ñ–æ–∫ {status}.')


@client.slash_command(description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
@application_checks.has_role(config.ADMIN_ROLE)
async def toggle_extension(interaction: nextcord.Interaction, extension: str):
    extension_name = f'engine.cogs.{extension}'
    try:
        if extension_name in client.extensions:
            client.unload_extension(extension_name)
            await interaction.response.send_message(
                embed=nextcord.Embed(
                    description=f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {extension} –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
                    colour=nextcord.Color.green()))
            logging.info(f'–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {extension} –æ—Ç–∫–ª—é—á–µ–Ω–æ.')
        else:
            client.load_extension(extension_name)
            await interaction.response.send_message(
                embed=nextcord.Embed(
                    description=f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {extension} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.",
                    colour=nextcord.Color.green()))
            logging.info(f'–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {extension} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    except Exception as error:
        await interaction.response.send_message(
            embed=nextcord.Embed(
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è {extension}.",
                colour=nextcord.Color.red()))
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è {extension}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {error}')


@client.event
async def on_application_command_error(interaction: nextcord.Interaction, error):
    handled_errors = (application_checks.ApplicationMissingAnyRole, application_checks.ApplicationMissingRole)
    if isinstance(error, handled_errors):
        await interaction.response.send_message(
            embed=nextcord.Embed(
                title=ERROR_HEADER,
                description=ERROR_MESSAGE,
                colour=nextcord.Color.red()), ephemeral=True
        )
    else:
        logging.error(f"–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")


@client.event
async def on_ready():
    logging.info(f'–ë–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º: {client.user.name}')
