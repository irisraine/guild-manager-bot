import nextcord
from nextcord.ext import commands, application_checks
import engine.config as config
import engine.messages as messages


class TalkModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞")

        self.message_content = nextcord.ui.TextInput(
            label="–°–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
            placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.message_content)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        channel = interaction.guild.get_channel(config.COMMON_DISCUSSION_CHANNEL)
        await channel.send(self.message_content.value)
        await interaction.followup.send(
            **messages.custom_embed_message(description="–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–ª—É–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"),
            ephemeral=True
        )


class TalkView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(**messages.admin_option_only_warning(), ephemeral=True)
            return False

    @nextcord.ui.button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", style=nextcord.ButtonStyle.blurple, emoji="ü¶å")
    async def send_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(TalkModal())

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_panel_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.message.delete()


class Talk(commands.Cog):
    def __init__(self, client):
        self.client = client

    @nextcord.slash_command(description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞")
    @application_checks.has_role(config.ADMIN_ROLE)
    async def say(self, interaction: nextcord.Interaction):
        await interaction.response.send_message(
            **messages.custom_embed_message(
                title="–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–ª—É–Ω –æ—Ç –ª–∏—Ü–∞ –õ–µ—Å–Ω–æ–≥–æ –û–ª–µ–Ω—è",
                description="–õ–µ—Å–Ω–æ–π –æ–ª–µ–Ω—å —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ –∏ —É–º–Ω–µ–µ, –ø–æ –≤–æ–ª–µ —Å–≤–æ–µ–≥–æ —Ç–≤–æ—Ä—Ü–∞ –æ–±—Ä–µ—Ç—è –¥–∞—Ä —Ä–∞–∑—É–º–∞ –∏ —Ä–µ—á–∏. "
                            "–ù–∞ —á—Ç–æ –∂–µ –æ–Ω —É–ø–æ—Ç—Ä–µ–±–∏—Ç –æ–±—Ä–µ—Ç–µ–Ω–Ω—É—é –º–æ—â—å? –° –∫–∞–∫–∏–º —Å–ª–æ–≤–æ–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –º–∏—Ä—É?"),
            view=TalkView()
        )


def setup(client):
    client.add_cog(Talk(client))
